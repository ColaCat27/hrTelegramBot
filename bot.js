require('dotenv').config();

const { Telegraf, session, Scenes: { WizardScene, Stage } } = require('telegraf');

const saveData = require('./services/saveData');

const bot = new Telegraf(process.env.TOKEN);


const mainScene = new WizardScene(
	'candidate',
    (ctx) => {
		try {
			ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é:');
			return ctx.wizard.next();
		} catch(e) {
			console.error(e);
			return ctx.scene.reenter();
		}

    },
	(ctx) => {
		try {
			if(ctx.message.text.length < 2 || /[^A-z–ê-—è \-\s]/.test(ctx.message.text)) {
				throw new Error();
			}
			ctx.wizard.state.lastName = ctx.message.text;
			ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∏–º—è:');
			return ctx.wizard.next();
		} catch(e) {
			console.error(e);
			ctx.reply('–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –≤–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –ø–æ–≤—Ç–æ—Ä–Ω–æ');
			ctx.wizard.selectStep(ctx.wizard.cursor);
			return;
		}
	},
	(ctx) => {
		try {
			if(ctx.message.text.length < 2 || /[^A-z–ê-—è \-\s]/.test(ctx.message.text)) {
				throw new Error();
			} else {
				ctx.wizard.state.firstName = ctx.message.text;
				ctx.reply('–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (–¥–¥.–º–º.–≥–≥–≥–≥):');
				return ctx.wizard.next();
			}
		} catch(e) {
			console.error(e);
			ctx.reply('–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–≤—Ç–æ—Ä–Ω–æ');
			ctx.wizard.selectStep(ctx.wizard.cursor);
			return;
		}
	},
	(ctx) => {
		try {
			let limit = new Date().getFullYear() - 15;
			if(!/\d+\.\d+\.\d+/.test(ctx.message.text)) {
				throw new Error();
			} else {
				let date = ctx.message.text.split('.');
				if(date[0].length > 2 || date[1].length > 2 || date[2].length > 4) {
					throw new Error();
				} else if(date[2] < 1950 || date[2] > limit) {
					throw new Error();
				} else if(date[0] <= 0 || date[0] > 31) {
					throw new Error();
				} else if(date[1] <= 0 || date[1] > 12) {
					throw new Error();
				}
			}
			ctx.wizard.state.date = ctx.message.text;
			 ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è (–ï—Å–ª–∏ –≥–æ—Ä–æ–¥–∞ –Ω–µ—Ç—É –≤ —Å–ø–∏—Å–∫–µ, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ —Å–∞–º–∏):', {
				reply_markup: {
					inline_keyboard: [
						[
							{ text: '–ú–æ—Å–∫–≤–∞', callback_data: '–ú–æ—Å–∫–≤–∞' },
							{ text: '–°–ü–ë', callback_data: '–°–ü–ë' }
						],
					],
				},
			});
			return ctx.wizard.next();
		} catch(e) {
			console.error(e);
			ctx.reply('–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–æ–≤—Ç–æ—Ä–Ω–æ, –ø—Ä–∏–º–µ—Ä: 11.10.2000');
			ctx.wizard.selectStep(ctx.wizard.cursor);
			return;
		}
	},
    (ctx) => {
		 try {
			if(ctx.message) {
				if(/[^A-z–ê-—è \-\s]/.test(ctx.message.text)) {
					throw new Error();
				} else {
					ctx.wizard.state.city = ctx.message.text;
				}

			} else {
				   ctx.wizard.state.city = ctx.update.callback_query.data;
		   }
		   ctx.reply('–£—Ä–æ–≤–µ–Ω—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ:', {
			   reply_markup: {
				   inline_keyboard: [
					   [{ text: 'Beginner (A0)', callback_data: 'Beginner (A0)' }],
					   [{ text: 'Elementary (A1)', callback_data: 'Elementary (A1)' }],
					   [{ text: 'Pre Intermediate (A2)', callback_data: 'Pre Intermediate (A2)' }],
					   [{ text: 'Intermediate (B1)', callback_data: 'Intermediate (B1)' }],
					   [{ text: 'Upper Intermediate (B2)', callback_data: 'Upper Intermediate (B2)' }],
					   [{ text: 'Advanced (C1)', callback_data: 'Advanced (C1)' }],
					   [{ text: 'Proficient (C2)', callback_data: 'Proficient (C2)' }],
				   ],
			   },
		   });
		   return ctx.wizard.next();
		 } catch(e) {
			 console.error(e);
			 ctx.reply('–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –≤—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ');
			 ctx.wizard.selectStep(ctx.wizard.cursor);
			 return;
		 }

    },
	(ctx) => {
		try {
			if(ctx.message) {
				throw new Error();
			}
			ctx.wizard.state.englishLevel = ctx.update.callback_query.data;
			ctx.reply('–û–ø–∏—à–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã (–î–æ 500 —Å–∏–º–≤–æ–ª–æ–≤):');
			return ctx.wizard.next();
		} catch(e) {
			console.error(e)
			ctx.reply('–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ —É—Ä–æ–≤–µ–Ω—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –ø–æ–≤—Ç–æ—Ä–Ω–æ');
			ctx.wizard.selectStep(ctx.wizard.cursor);
			return;
		} 

	},
	(ctx) => {
		try {
			if(ctx.message.text.length > 500) {
				throw new Error();
			}
			ctx.wizard.state.previousExp = ctx.message.text;
			ctx.reply("–í–∞—à –º–æ–±–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä (–ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)", {
				reply_markup: {
				  keyboard: [
					[
					  {
						text: "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–±–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä",
						request_contact: true,
					  }
					],
					[
						{
							text: "–ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å"
						}
					]
				  ],
				  one_time_keyboard: true,
				  resize_keyboard: true
				},
			  })
			  return ctx.wizard.next();
		} catch(e) {
			console.error(e);
			ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–µ –±–æ–ª—å—à–µ 500 —Å–∏–º–≤–æ–ª–æ–≤.');
			ctx.wizard.selectStep(ctx.wizard.cursor);
			return;
		}
	},
	(ctx) => {
		try {
			if(ctx.message.contact) {
				ctx.wizard.state.phone = ctx.message.contact.phone_number;
			}
			if(ctx.update.message.from.username) {
				ctx.wizard.state.username = ctx.update.message.from.username;
			} else {
				ctx.wizard.state.username = "";
			}
			if(ctx.update.message.from.first_name) {
				ctx.wizard.state.tgName = ctx.update.message.from.first_name;
			} else {
				ctx.wizard.state.tgName = "";
			}
			if(ctx.update.message.from.last_name) {
				ctx.wizard.state.tgLastName = ctx.update.message.from.last_name;
			} else {
				ctx.wizard.state.tgLastName = "";
			}
			
			ctx.reply('–°–ø–∞—Å–∏–±–æ —á—Ç–æ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –∞–Ω–∫–µ—Ç—É!üëç');
			saveData(ctx.wizard.state);
			return ctx.wizard.next();
		} catch(e) {
			console.error(e);
			return ctx.wizard.next();
		}

	},
	(ctx) => {
		ctx.scene.leave();
	}
);

const stage = new Stage([mainScene]);

bot.use(session());
bot.use(stage.middleware());


bot.start(async (ctx) => {
    await ctx.reply('–ü—Ä–∏–≤–µ—Ç, –æ—Ç–≤–µ—Ç—å—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤.');
    ctx.scene.enter('candidate');
});

bot.help((ctx) => {
	ctx.reply('–í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã')
})

bot.launch();
